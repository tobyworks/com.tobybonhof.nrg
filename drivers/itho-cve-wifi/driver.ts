'use strict';

import Homey from 'homey';
import PairSession from 'homey/lib/PairSession';
import IthoCveApi from '../../lib/IthoCveApi';
import IthoDiscoveryResult from '../../lib/IthoCveDiscoveryResult';
import IthoCveWizard from '../../lib/IthoCveWizard';
import IthoCveConfig from '../../lib/IthoCveConfig';
import IthoCveStatus from '../../lib/IthoCveStatus';

export default class IthoCveDriver extends Homey.Driver {

  MAX_SPEED: number = 255;
  ON_SPEED: number = 250;
  OFF_SPEED: number = 25;

  ithoApi: IthoCveApi = new IthoCveApi();
  private statusListener?: (status: IthoCveStatus) => Promise<void>;

  /**
   * onInit is called when the driver is initialized.
   */
  async onInit() {
    this.log('MyDriver has been initialized');
  }

  /**
   * Set a status listener that will be called every time the status is synced.
   */
  setStatusListener(listener: (status: IthoCveStatus) => Promise<void>) {
    this.statusListener = listener;
    this.log('Status listener has been set');
  }

  /**
   * Toggle fan on or off.
   */
  async toggleOnOff(config: IthoCveConfig, turnOn: boolean) {
    const speed = turnOn ? this.ON_SPEED : this.OFF_SPEED;
    console.log(`Setting speed to ${speed}`);
    await this.ithoApi.setFanSpeed(config, speed);
    await new Promise((resolve) => setTimeout(resolve, 500));
    await this.syncStatus(config);
  }

  /**
   * Dim fan to a specific speed.
   */
  async dimToValue(config: IthoCveConfig, value: number) {
    const speed = value * this.MAX_SPEED;
    await this.ithoApi.setFanSpeed(config, speed);
    await new Promise((resolve) => setTimeout(resolve, 500));
    await this.syncStatus(config);
  }

  /**
   * Sync the current status and call the status listener.
   */
  async syncStatus(config: IthoCveConfig) {
    // Fetch the latest status from the API or device
    const status = await this.ithoApi.getIthoStatus(config);

    // Log the synced status
    console.log('Status synced:', status);

    // Call the status listener if it is set
    if (this.statusListener) {
      this.statusListener(status);
    }
  }

  onPair(session: PairSession): Promise<void> {
    IthoCveWizard.getInstance()
      .reset();

    session.setHandler('discoverNrgLocal', async (data) => {
      IthoCveWizard.getInstance()
        .setHost('nrg.local');
      const discoveryResult = await this.ithoApi.discover();
      await this.handleDiscoveryResult(session, discoveryResult);
    });

    session.setHandler('discoverDiy', async (data) => {
      IthoCveWizard.getInstance()
        .setHost(data);
      const discoveryResult = await this.ithoApi.discover();
      await this.handleDiscoveryResult(session, discoveryResult);
    });

    session.setHandler('authenticate', async (data) => {
      IthoCveWizard.getInstance()
        .setUsername(data.username);
      IthoCveWizard.getInstance()
        .setPassword(data.password);
      const discoveryResult = await this.ithoApi.discover();
      await this.handleDiscoveryResult(session, discoveryResult);
    });

    session.setHandler('abort', async () => {
      await session.done();
    });

    return super.onPair(session);
  }

  private async handleDiscoveryResult(session: PairSession, discoveryResult: IthoDiscoveryResult) {
    switch (discoveryResult) {
      case IthoDiscoveryResult.DiscoveredUnauthenticated:
        await session.showView('discovered');
        await session.emit('deviceConfig', IthoCveWizard.getInstance()
          .getConfig());
        break;
      case IthoDiscoveryResult.NotDiscovered:
        await session.showView('discover_diy');
        break;
      case IthoDiscoveryResult.DiscoveredAuthenticated:
        await session.showView('authenticate');
        break;
      default:
        throw new Error(`Unhandled case: ${discoveryResult}`);
    }
  }

}

module.exports = IthoCveDriver;
