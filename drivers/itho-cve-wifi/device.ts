import Homey, { DiscoveryResult } from 'homey';
import WebSocket from 'ws';
import IthoCveDriver from './driver';
import IthoCveConfig from '../../lib/IthoCveConfig';
import IthoCveStatus from '../../lib/IthoCveStatus';

export default class IthoCveDevice extends Homey.Device {

  /**
   * onInit is called when the device is initialized.
   */
  async onInit() {
    this.log('MyDevice has been initialized');
    // Emit state
    const driver = this.driver as IthoCveDriver;
    driver.setStatusListener(async (status) => {
      await this.syncCapabilities(status);
    });

    this.registerCapabilityListener('onoff', async (value) => {
      await driver.toggleOnOff(this.createIthoCveConfig(), value);
    });

    this.registerCapabilityListener('dim', async (value) => {
      await driver.dimToValue(this.createIthoCveConfig(), value);
    });

    this.homey.setInterval(async () => {
      await driver.syncStatus(this.createIthoCveConfig());
    }, 15_000);
  }

  async syncCapabilities(status: IthoCveStatus) {
    const driver = this.driver as IthoCveDriver;
    await this.setCapabilityValue('onoff', status.speedInt > driver.OFF_SPEED);
    await this.setCapabilityValue('measure_temperature', status.temp);
    await this.setCapabilityValue('measure_humidity', status.hum);
    await this.setCapabilityValue('dim', status.speedInt / driver.MAX_SPEED);
  }

  /**
   * onAdded is called when the user adds the device, called just after pairing.
   */
  async onAdded() {
    this.log('MyDevice has been added');
  }

  /**
   * onSettings is called when the user updates the device's settings.
   * @param {object} event the onSettings event data
   * @param {object} event.oldSettings The old settings object
   * @param {object} event.newSettings The new settings object
   * @param {string[]} event.changedKeys An array of keys changed since the previous version
   * @returns {Promise<string|void>} return a custom message that will be displayed
   */
  async onSettings({
    oldSettings,
    newSettings,
    changedKeys,
  }: {
    oldSettings: { [key: string]: boolean | string | number | undefined | null };
    newSettings: { [key: string]: boolean | string | number | undefined | null };
    changedKeys: string[];
  }): Promise<string | void> {
    this.log('MyDevice settings where changed');
  }

  /**
   * onRenamed is called when the user updates the device's name.
   * This method can be used this to synchronise the name to the device.
   * @param {string} name The new name
   */
  async onRenamed(name: string) {
    this.log('MyDevice was renamed');
  }

  /**
   * onDeleted is called when the user deleted the device.
   */
  async onDeleted() {
    this.log('MyDevice has been deleted');
  }

  private createIthoCveConfig(): IthoCveConfig {
    return new IthoCveConfig(
      this.getSetting('host'),
      this.getSetting('isAuthenticated'),
      this.getSetting('username'),
      this.getSetting('password'),
    );
  }

}

module.exports = IthoCveDevice;
